service: govScanInfo

plugins:
  - serverless-python-requirements

custom:
  pythonRequirements:
    dockerizePip: non-linux
  variables:
    siteAuditTable: "arn:aws:dynamodb:us-west-2:820756113164:table/siteAuditGovMy"
    DNSRecordsTable: "arn:aws:dynamodb:us-west-2:820756113164:table/DNSRecords"
    s3Bucket: "arn:aws:s3:::files.siteaudit.sayakenahack.com"
    s3BucketItems: "arn:aws:s3:::files.siteaudit.sayakenahack.com/*"
    lambda: "arn:aws:lambda:us-west-2:820756113164:function"
    apiPath: /api/v2

package:
  exclude:
    - test/*
    - test*
    - venv/**

provider:
  name: aws
  runtime: python3.6
  region: us-west-2
  stage: ProdNew
  memorySize: 128 # explicitly set to 128
  timeout: 10 # default is 6
  iamRoleStatements: # permissions for all of your functions can be set here
    - Effect: Allow
      Action: # Gives permission to DynamoDB tables in a specific region
        - dynamodb:Query
        - dynamodb:PutItem
        - dynamodb:BatchWriteItem
      Resource: ${self:custom.variables.siteAuditTable}
    - Effect: Allow
      Action: # Gives permission to DynamoDB tables in a specific region
        - dynamodb:Query
        - dynamodb:PutItem
        - dynamodb:BatchWriteItem
      Resource: ${self:custom.variables.DNSRecordsTable}
    - Effect: Allow
      Action:
        - s3:ListBucket
      Resource: ${self:custom.variables.s3Bucket}
    - Effect: Allow
      Action:
        - s3:GetObject
        - s3:PutObject
      Resource: ${self:custom.variables.s3BucketItems}
    - Effect: Allow
      Action:
        - lambda:InvokeFunction
      Resource: ${self:custom.variables.lambda}:${opt:stage, self:provider.stage}-*


versionFunctions: false # don't keep old versions (there's GIT for that)

functions:
  get_latest_fqdn:
    handler: main.get_latest_fqdn
    name: ${opt:stage, self:provider.stage}-get_latest_fqdn
    description: Get Full TLS Record for fqdn
    events:
      - http:
          path: ${self:custom.variables.apiPath}/siteLatest
          method: get
          cors: true
  get_history_fqdn:
    handler: main.get_history_fqdn
    name: ${opt:stage, self:provider.stage}-get_history_fqdn
    description: Get Historical records of the sites ScanObjects
    events:
      - http:
          path: /api/v2/siteHistory
          method: get
          cors: true
  get_scan:
    handler: main.get_scan
    name: ${opt:stage, self:provider.stage}-get_scan
    description: View History of Site
    events:
      - http:
          path: /api/v2/scanDetails
          method: get
          cors: true
  list_scans:
    handler: list_scans.list_scans
    name: ${opt:stage, self:provider.stage}-list_scans
    description: List scan files in S3 Bucket
    events:
      - http:
          path: /api/v2/listScans
          method: get
          cors: true
  list_hostnames:
    handler: list_domains_fqdn.list_fqdns
    name: ${opt:stage, self:provider.stage}-list_fqdns
    description: List hostnames that are scanned
    events:
      - http:
          path: /api/v2/listFQDNs
          method: get
          cors: true
  list_domains:
    handler: list_domains_fqdn.list_domains
    name: ${opt:stage, self:provider.stage}-list_domains
    description: List registered domains that are scanned
    events:
      - http:
          path: /api/v2/listDNs
          method: get
          cors: true
  get_hostnames:
    handler: list_domains_fqdn.get_hostnames
    name: ${opt:stage, self:provider.stage}-get_hostnames
    description: Get hostnames from github repo and stores as a file in S3
    timeout: 120
    events:
      - schedule: cron(0 13 * * ? *) # runs at 13:05 UTC @ 9.00pm MYT
  query_dns_records:
    handler: dns_query.query_dns_records
    name: ${opt:stage, self:provider.stage}-query_dns_records
    description: Queries DNS records and stores results in DynamoDB # No API Calls for this one, it's invoked
    timeout: 30  # 6 seconds is not enough to query the dns records
  get_dns_history:
    handler: dns_query.get_dns_history
    name: ${opt:stage, self:provider.stage}-get_dns_history
    description: Get DNS records from file in dynamoDB
    events:
      - http:
          path: /api/v2/DNSHistory
          method: get
          cors: true
  invoke_dns_queries:
    handler: list_domains_fqdn.invoke_dns_queries
    name: ${opt:stage, self:provider.stage}-invoke_dns_queries
    description: Asycrohonously invoke dns queries for every domain name
    timeout: 300  # maximum time to query all domains
    events:
      - schedule: cron(6 13 * * ? *)  # runs at 13:05 UTC @ 9.05pm MYT

###
### Comment all below if you do not wish to create bucket & DynamoDB ###
###

# resources:  
  # Resources:
    # uploadbucket:
    #  DeletionPolicy: Retain
    #  Type: AWS::S3::Bucket
    #  Properties:
    #    BucketName: files.siteaudit.sayakenahack.com # Hard Code, change this later
    # SiteAuditTable:
      # Type: 'AWS::DynamoDB::Table'
      # DeletionPolicy: Retain  
      # Properties:
        # TableName: siteAuditGovMy # Hard Code, change this later
        # AttributeDefinitions:
          # - AttributeName: FQDN # FQDN is an acronym, hence CAPS :)
          #   AttributeType: S
          # - AttributeName: scanDate 
          #   AttributeType: S
        # KeySchema:
          # - AttributeName: FQDN
          #   KeyType: HASH
          # - AttributeName: scanDate
          #   KeyType: RANGE
        # ProvisionedThroughput:
          # ReadCapacityUnits: 2
          # WriteCapacityUnits: 1

